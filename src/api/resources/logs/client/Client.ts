/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vapi from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Logs {
    export interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Logs {
    constructor(protected readonly _options: Logs.Options) {}

    /**
     * @param {Vapi.LogsGetRequest} request
     * @param {Logs.RequestOptions} requestOptions - Request-specific configuration.
     */
    public async get(
        request: Vapi.LogsGetRequest = {},
        requestOptions?: Logs.RequestOptions,
    ): Promise<core.Page<Vapi.Log>> {
        const list = async (request: Vapi.LogsGetRequest): Promise<Vapi.LogsPaginatedResponse> => {
            const {
                type: type_,
                webhookType,
                assistantId,
                phoneNumberId,
                customerId,
                squadId,
                callId,
                page,
                sortOrder,
                limit,
                createdAtGt,
                createdAtLt,
                createdAtGe,
                createdAtLe,
                updatedAtGt,
                updatedAtLt,
                updatedAtGe,
                updatedAtLe,
            } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (type_ != null) {
                _queryParams["type"] = type_;
            }
            if (webhookType != null) {
                _queryParams["webhookType"] = webhookType;
            }
            if (assistantId != null) {
                _queryParams["assistantId"] = assistantId;
            }
            if (phoneNumberId != null) {
                _queryParams["phoneNumberId"] = phoneNumberId;
            }
            if (customerId != null) {
                _queryParams["customerId"] = customerId;
            }
            if (squadId != null) {
                _queryParams["squadId"] = squadId;
            }
            if (callId != null) {
                _queryParams["callId"] = callId;
            }
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (sortOrder != null) {
                _queryParams["sortOrder"] = sortOrder;
            }
            if (limit != null) {
                _queryParams["limit"] = limit.toString();
            }
            if (createdAtGt != null) {
                _queryParams["createdAtGt"] = createdAtGt;
            }
            if (createdAtLt != null) {
                _queryParams["createdAtLt"] = createdAtLt;
            }
            if (createdAtGe != null) {
                _queryParams["createdAtGe"] = createdAtGe;
            }
            if (createdAtLe != null) {
                _queryParams["createdAtLe"] = createdAtLe;
            }
            if (updatedAtGt != null) {
                _queryParams["updatedAtGt"] = updatedAtGt;
            }
            if (updatedAtLt != null) {
                _queryParams["updatedAtLt"] = updatedAtLt;
            }
            if (updatedAtGe != null) {
                _queryParams["updatedAtGe"] = updatedAtGe;
            }
            if (updatedAtLe != null) {
                _queryParams["updatedAtLe"] = updatedAtLe;
            }
            const _response = await (this._options.fetcher ?? core.fetcher)({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.VapiEnvironment.Default,
                    "logs",
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@vapi-ai/server-sdk",
                    "X-Fern-SDK-Version": "v0.5.1",
                    "User-Agent": "@vapi-ai/server-sdk/v0.5.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return _response.body as Vapi.LogsPaginatedResponse;
            }
            if (_response.error.reason === "status-code") {
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.VapiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.VapiTimeoutError("Timeout exceeded when calling GET /logs.");
                case "unknown":
                    throw new errors.VapiError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        let _offset = request?.page != null ? request?.page : 1;
        return new core.Pageable<Vapi.LogsPaginatedResponse, Vapi.Log>({
            response: await list(request),
            hasNextPage: (response) => (response?.results ?? []).length > 0,
            getItems: (response) => response?.results ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * @param {Vapi.LoggingControllerLogsDeleteQueryRequest} request
     * @param {Logs.RequestOptions} requestOptions - Request-specific configuration.
     */
    public async loggingControllerLogsDeleteQuery(
        request: Vapi.LoggingControllerLogsDeleteQueryRequest = {},
        requestOptions?: Logs.RequestOptions,
    ): Promise<void> {
        const { type: type_, assistantId, phoneNumberId, customerId, squadId, callId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (type_ != null) {
            _queryParams["type"] = type_;
        }

        if (assistantId != null) {
            _queryParams["assistantId"] = assistantId;
        }

        if (phoneNumberId != null) {
            _queryParams["phoneNumberId"] = phoneNumberId;
        }

        if (customerId != null) {
            _queryParams["customerId"] = customerId;
        }

        if (squadId != null) {
            _queryParams["squadId"] = squadId;
        }

        if (callId != null) {
            _queryParams["callId"] = callId;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.VapiEnvironment.Default,
                "logs",
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@vapi-ai/server-sdk",
                "X-Fern-SDK-Version": "v0.5.1",
                "User-Agent": "@vapi-ai/server-sdk/v0.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VapiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VapiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VapiTimeoutError("Timeout exceeded when calling DELETE /logs.");
            case "unknown":
                throw new errors.VapiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
